swagger: '2.0'
info:
  description: >-
    This is the REST API documentation for Citadel, a city-scale data hub. You
    can interact with Citadel to store/retrieve city data in a unified/safe way.

    ## A few essential definitions

    1. *Spatio-Temporal Data*: list of values, each of which has space and time
    indices.

    2. *Metadata*: Any other contextual information other than spatio-temporal
    data. For example, owner of the data, license, relevant entity (e.g., the
    car corresponding to a speed sensor.), etc.

    3. *Data Point* (often just *Point*): A data stream (being) generated by an
    entity with the same metadata. (Metadata may change over time, but the
    change must not affect the understanding of the Point as a same data
    stream.)

    4. Metadata/Data Models: Refer below Models section.

    ## Generic Process of the interaction

    1. Determine your data *points*.

    2. Define Metadata per point.

    3. Create all points using "POST /point" API. The API will return created
    UUIDs. You need to memorize these. Otherwise, you have to query every time
    to get the UUIDs.

    4. Convert your spatio-temporal data into the right format (refer Models
    section). Then, push them into Citadel using "POST /data" API.

    5. Query data using either "POST /querydata" for BBOX query or "POST /query"
    for finding UUIDs with metadata.
  version: 0.0.1
  title: Citadel
  contact:
    email: jbkoh@ucsd.edu
  license:
    name: Apache 2.0
    url: 'https://github.com/MetroInsight/citadel/blob/master/LICENSE'
host: xxx.yyyy.io
basePath: /api
tags:
  - name: metadata
    description: Contextual information of data points.
  - name: data
    description: >-
      Spatio-temporal data interface. Its contextual information is stored as
      metadata.
schemes:
  - http
paths:
  /point:
    post:
      tags:
        - metadata
      summary: Add a Point.
      description: ''
      operationId: createPoint
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            Metadata of a point to make. The name should be unique in the
            system.
          required: true
          schema:
            properties:
              userToken:
                $ref: '#/definitions/Token'
              point:
                $ref: '#/definitions/Metadata'
      responses:
        '200':
          description: successful creation
        '400':
          description: Various reasons.
  '/point/{uuid}':
    get:
      tags:
        - metadata
      summary: Get metadata corresponding to a UUID.
      description: Get metadata corresponding to a UUID.
      operationId: getPoint
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: UUID of a Point
          required: true
          type: string
      responses:
        '200':
          description: Get Point's metadata object.
          schema:
            $ref: '#/definitions/Metadata'
        '400':
          description: Various reasons.
        '404':
          description: Point not found (TODO)
  /query:
    post:
      tags:
        - metadata
      summary: Query points matching given tag-value pairs.
      description: Query points matching given tag-value pairs.
      operationId: queryPoint
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            Metadata of a point to make. The name should be unique in the
            system.
          required: true
          schema:
            $ref: '#/definitions/MetadataQuery'
      responses:
        '200':
          description: Get Point's metadata object.
          schema:
            $ref: '#/definitions/MetadataResult'
        '400':
          description: Various reasons.
        '404':
          description: Point not found (TODO)
  /data:
    post:
      tags:
        - data
      summary: Push data
      description: Pushing given spatio-temporal data.
      operationId: insertData
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of data.
          required: true
          schema:
            properties:
              userToken:
                $ref: '#/definitions/Token'
              data:
                $ref: '#/definitions/Data'
      responses:
        '200':
          description: successful push
        '400':
          description: Various reasons.
  /querydata:
    post:
      tags:
        - data
      summary: Spatio-temporal Query for Data
      description: 'Data query based on i) Bounding box, ii) time range, and iii) UUIDs'
      operationId: queryData
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: ''
          required: true
          schema:
            properties:
              query:
                $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DataResult'
        '400':
          description: Various reasons.
definitions:
  Token:
    type: string
    example: YourTokenHere
  Metadata:
    type: object
    required:
      - name
      - pointType
    properties:
      name:
        type: string
        example: mySensor1
      pointType:
        type: string
        example: temperature
      unit:
        type: string
        example: DEG_F
  MetadataQuery:
    type: object
    properties:
      query:
        type: object
        properties:
          name:
            type: string
            example: mySensor1 (optional)
          pointType:
            type: string
            example: temperature (optional)
          unit:
            type: string
            example: DEG_F (optional)
  MetadataResult:
    type: object
    properties:
      results:
        type: array
        items:
          type: string
        example:
          - UUID_1
          - UUID_2
      success:
        type: boolean
      reason:
        type: string
  Datum:
    type: object
    properties:
      uuid:
        type: string
        example: UUID_1
      timestamp:
        type: integer
        example: 1511046384000
        description: UNIX timestamp in microseconds.
      geometryType:
        type: string
        example: point
        description: 'One of "point", "line", and "polygon"'
      coordinates:
        type: array
        items:
          type: array
          items:
            type: number
        example:
          - - -117.231778
            - 32.882319
      value:
        type: number
        example: '71.0'
  Data:
    type: array
    items:
      $ref: '#/definitions/Datum'
  DataQuery:
    type: object
    properties:
      lat_min:
        type: number
        example: 32.88231
      lat_max:
        type: number
        example: 32.88232
      lng_min:
        type: number
        example: -117.23178
      lng_max:
        type: number
        example: -117.23177
      timestamp_min:
        type: integer
        example: 1511046284000
      timestamp_max:
        type: integer
        example: 1511046584000
      uuids:
        type: array
        items:
          type: string
        example:
          - UUID_1
          - UUID_2
  DataResult:
    type: object
    properties:
      results:
        $ref: '#/definitions/Data'
      success:
        type: boolean
      reason:
        type: string
externalDocs:
  description: Find out more about Citadel and MetroInsight.
  url: 'https://metroinsight.io'
