#%RAML 1.0
title: Citadel REST API
version: v1
schemas:
  - Metadata: |
     { 
       "$schema": "http://json-schema.org/draft-03/schema",
       "type": "object",
       "properties": {
         "uuid": { "type": "string"},
         "unit": { "type": "string"},
         "pointType": { "type": "string"}
       }
     }
  - Datum: |
      {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object",
        "properties": {
          "uuid": { "type": "string"},
          "value": { "type": "double"},
          "geometryType": { "type": "string"},
          "coordinates": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "double"
              }
            }
        }
      }
  - Data: |
      [
        schema: Datum
      ]
  - DataQuery: |
      {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object",
        "properties": {
          "query": {
            "type": "object",
            "properties": {
              "uuids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "lat_max": {"type": "double"},
              "lat_min": {"type": "double"},
              "lng_max": {"type": "double"},
              "lng_min": {"type": "double"},
              "timestamp_min": {"type": "integer"}, #long to be precise
              "timestamp_max": {"type": "integer"}  #long to be precise
            }
          }
        }
      }

/api:
  get:
    responses:
      200:
        body:
          {API Documentation}
  /point:
    post:
      description: Create a point with given metadata.
      responses:
        201:
          body:
            application/json:
              example: 
    /{uuid}
      get:
        description: Retrieve metadata given uuid.
        responses:
          200:
            body:
              application/json:
                schema: Metadata
  /data:
    post:
      description: Posting data. 
      body:
        application/json:
          schema: Data
      responses:
        201:
          body:
            {}
  /query:
    post:
      description: Retrieve metadata with a query. Finding Metadata mathching the query.
      body:
        application/json:
          {}
      responses:
        200:
          body:
            application/json:
              schema: |
                {}
  /querydata:
    post:
      description: Retrieving data with a query. Box lat,long, time range, UUIDs can be specified.
      body:
        application/json:
          {}
      responses: 
        200:
          body:
            application/json:
              schema: |
                {}
    /simplebbox:
      post:
        description: Retrieving points with most recent location and value in a bbox
          body:
            application/json:
              {
                "query": {
                  "min_lng": -112.0,
                  "max_lng": -111.0,
                  "min_lat": 32.0,
                  "max_lat": 33.0
                }
              }
          responses:
            200:
              body:
                application.json:
                  {
                    "results": [],
                    "success": True,
                    "reason" ""
                  }
