doctype html
html 
 head
  title Citadel
  meta(name="google-signin-client_id", content="647740225111-42ei85rkp2o7pes54unj9lm9kqc2hvpg.apps.googleusercontent.com")
  script(src="https://apis.google.com/js/platform.js?onload=onLoad",async defer)
  script(type='text/javascript',src="/scripts/login.js")
  link(rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css")
  script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js")
  script(src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js")
 body
  div(class="jumbotron text-center")
   div(class="container")
    div(class="row")
     div(class="col-sm-9")
      h2 welcome #{context.username}
     div(class="col-sm-3")
      button(type="button" class="btn btn-primary btn-md" onclick="signOut()") Sign Out
  
  div(class="container")
   div(class="row")
    h2 Your Token is 
    p #{context.tokens}
 
   div(class="row")
    //-div(class="col-sm-5")
    h3 Available Sensors  
     //-pre.
      //-#{context.userSensors}
    table(id="userSensors" class="table table-hover")
    script.
      var rawdata='#{context.userSensors}';
      rawdata = rawdata.replace(/&quot;/g, '"');
      rawdata = rawdata.replace(/(?:\r\n|\r|\n)/g, '');
      var sensors = JSON.parse(rawdata);
      var table = document.getElementById('userSensors')
      var tableBody = document.createElement('TBODY')
      table.appendChild(tableBody);
      
      var heading = new Array();
           heading[0] = "owner"
           heading[1] = "uuid"
           heading[2] = "sensorType"
           heading[3] = "unit"
       if(sensors.length>0)
       { 
        //TABLE COLUMNS
            var tr = document.createElement('TR');
            tableBody.appendChild(tr);
            for (i = 0; i < heading.length; i++) {
                var th = document.createElement('TH')
                th.appendChild(document.createTextNode(heading[i]));
                tr.appendChild(th);
            }
            
         }  
         else
         {
         
         //TABLE COLUMNS
            var tr = document.createElement('TR');
            tableBody.appendChild(tr);
            
                var th = document.createElement('TH')
                th.appendChild(document.createTextNode('No Sensors'));
                tr.appendChild(th);
         }
          
      //TABLE ROWS
      
            
      for (i = 0; i < sensors.length; i++) {
           var tr = document.createElement('TR');
           
                var td = document.createElement('TD')
                td.appendChild(document.createTextNode(sensors[i].owner)); 
                tr.appendChild(td)
                
                var td = document.createElement('TD')
                td.appendChild(document.createTextNode(sensors[i].uuid)); 
                tr.appendChild(td)
                
                var td = document.createElement('TD')
                td.appendChild(document.createTextNode(sensors[i].sensorType)); 
                tr.appendChild(td)
                
                var td = document.createElement('TD')
                td.appendChild(document.createTextNode(sensors[i].unit)); 
                tr.appendChild(td)
                
               tableBody.appendChild(tr);
            }
        
    //-div(class="col-sm-5")
     //-h3 Registered DataStreams
     
    
   div(class="row")
    h2 Citadel Api Usage
    h3
     mark Register Sensor Example
    pre. 
     import requests
     # Modify API_ENDPOINT
     API_ENDPOINT = "https://localhost:8080/api/registerSensor"
     # Enter userToken
     Sensor = '{"userToken":"#{context.tokens}","sensor":{"sensorType":"temperature","unit":"F"}}'
     r = requests.post(url = API_ENDPOINT, data = Sensor,verify=False)
     print("Response is:%s"%r.text)
     
     # Response is:{"result":"SUCCESS","uuid":"returned-uuid"}
     
    //-h3
     //-mark Get Sensor Metadata 
    //-pre. 
      //-import requests
      //-# Modify API_ENDPOINT
      //-API_ENDPOINT = "https://localhost:8080/api/getSensor"
      //-# Enter userToken and uuid
      //-Sensor = '{"userToken":"enter-token","uuid":"enter-uuid"}';
      //-r = requests.post(url = API_ENDPOINT, data = Sensor,verify=False)
      //-print("Response is:%s"%r.text)
      
      //-# Response is:{"success":true,"reason":"","results":[{"sensorType":"temperature","unit":"F","owner":"owner-id"}]}
      
    h3
     mark Query Sensor Metadata 
    pre. 
      import requests
      # Modify API_ENDPOINT
      API_ENDPOINT = "https://localhost:8080/api/querySensor"
      # Enter userToken and uuid
      Sensor = '{"userToken":"#{context.tokens}","query":{"uuid":"sensor-uuid"}}';
      r = requests.post(url = API_ENDPOINT, data = Sensor,verify=False)
      print("Response is:%s"%r.text)
      
      # Response is:{"success":true,"reason":"","results":[{"sensorType":"temperature","unit":"F","uuid":"sensor-uuid","owner":"owner-id"}]}
      
    h3
     mark Insert Data
    pre. 
      import requests
      # Modify API_ENDPOINT
      API_ENDPOINT = "https://localhost:8080/api/data"
      # Enter userToken and uuid
      Data = '{"userToken":"#{context.tokens}","uuid":"sensor-uuid","data":[{"timestamp":1499813708623,"value":"val","geometryType":"point","coordinates":[[lat,lng]]}]}'
      r = requests.post(url = API_ENDPOINT, data = Data,verify=False)
      print("Response is:%s"%r.text)
      
      # Response is:{"success":true,"reason":"","results":[]}
      
    h3
     mark Query Data
    pre. 
      import requests
      # Modify API_ENDPOINT
      API_ENDPOINT = "https://localhost:8080/api/querydata"
      # Enter userToken and uuid
      query='{"userToken":"#{context.tokens}","uuid":"sensor-uuid","query":{"lat_min":lat,"lat_max":lat,"lng_min":lng,"lng_max":lng,"timestamp_min":time,"timestamp_max":time}}'
      r = requests.post(url = API_ENDPOINT, data = query,verify=False)
      print("Response is:%s"%r.text)
      
      # Response is:{"success":true,"reason":"","results":[{"uuid":"ee548c8c-5636-452d-b0a7-57fb4b6abeef","timestamp":1499813708623,"lat":30.0,"lng":60.0,"value":"15.0"}]}
      
    h3
     mark Insert Simple Access Control Policy
    pre. 
      import requests
      # Modify API_ENDPOINT
      API_ENDPOINT = "https://localhost:8089/api/registerPolicy"
      # Enter userToken and policy
      Policy = '{"userToken":"#{context.tokens}","policy":{"sensors":["sensor-uuid"], "users":["testcitadel1@gmail.com"]}'
      r = requests.post(url = API_ENDPOINT, data = Policy,verify=False)
      print("Response is:%s"%r.text)
      
      # Response is:{"success":true,"reason":"","results":[]}
      
    h3
     mark Insert Spatio-Temporal Access Control Policy
    pre. 
      import requests
      # Modify API_ENDPOINT
      API_ENDPOINT = "https://localhost:8089/api/registerPolicy"
      # Enter userToken and policy
      Policy = '{"userToken":"#{context.tokens}","policy":{"sensors":["sensor-uuid"], "users":["testcitadel1@gmail.com"], "where":{"allowedPolygons":[[{"lat":lat1,"lng":lng1},{...},{"lat":lat1,"lng":lng1}]}}}}'
      # Example - "allowedPolygons":[[{"lat":30.0,"lng":60.0},{"lat":40.0,"lng":60.0},{"lat":40.0,"lng":70.0},{"lat":30.0,"lng":70.0},{"lat":30.0,"lng":60.0}]]
      r = requests.post(url = API_ENDPOINT, data = Policy,verify=False)
      print("Response is:%s"%r.text)
      
      # Response is:{"success":true,"reason":"","results":[]}
      
    h3
     mark Different Spatio-Temporal  Access Control Policy
    pre. 
      "where":{"allowedPolygons":[[{"lat":lat1,"lng":lng1},{...},{"lat":lat1,"lng":lng1}] , [{"lat":lat2,"lng":lng2},{...},{"lat":lat2,"lng":lng2}]]}, "denyPolygons":[{"lat":lat3,"lng":lng3},{...},{"lat":lat3,"lng":lng3}]}}
      Examples:
       "allowedPolygons":[[{"lat":30.0,"lng":60.0},{"lat":40.0,"lng":60.0},{"lat":40.0,"lng":70.0},{"lat":30.0,"lng":70.0},{"lat":30.0,"lng":60.0}],[{"lat":5.0,"lng":5.0},{"lat":50.0,"lng":5.0},{"lat":50.0,"lng":70.0},{"lat":5.0,"lng":70.0},{"lat":5.0,"lng":5.0}]]
       "denyPolygons":[[{"lat":5.0,"lng":5.0},{"lat":10.0,"lng":5.0},{"lat":10.0,"lng":10.0},{"lat":5.0,"lng":10.0},{"lat":5.0,"lng":5.0}]]}
      
      "when":{"allowTimes":[{"start":time1,"end":time2}],"denyTimes":[{"start":time3,"end":time4}]}
      Example: 
       "denyTimes":[{"start":1499813604623,"end":1499823609623}]